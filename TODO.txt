TODO for BasicTV, no particular order of importance

CODE UPKEEP
1. Start using P_UNABLE instead of P_ERR, to post an almost spam-y sort of output whenever a section of code is unable to be ran, since
   I can't really tell whether a code path is supposed to happen if errors are the only way of handling a majority of failing code (failing
   meaning unable to complete).

MATH
1. Make a standardized unit converter/generator/extractor, based on the information given and some definition of what we want
   a. That definition is probably sane local units in the settings.cfg file
2. Allow for higher and lower precision than 64-bit (casting to uint64_t is pretty wack, 32-bit length is good)

TV
1. Video compression (VP9)
2. Intuitive UI
3. Finish webcam recording (not a priority)
4. Decode online streams and re-encode into WebM

NETWORKING
1. Finish network request handling
2. Hoard as much data as possible
   a. Ping time from a ping program
   b. Ping time from time of request being sent to response
   c. Packet sizes sent off at what times (offloaded to buffer, remember)
   d. Packet sizes received at what times (download speed)
   e. Log of all IDs received from a peer
   f. List of linked list requests they are subscribed to (effectively creating a fasttrack pipeline of data)
   g. List of all failed queries (successful queries are in IDs received)
   h. Query peers about a content storage distribution over different storage tiers
3. Do the following with the hoarded data
   a. Get a distribution of hashes successfully received, use those in prioritizing queries
   b. Get a "reliability" rating of a timely response, generated from variance of ping time of requests
   c. Find the probablility that a node has a given ID, based on linked list references and the hash
   d. Sum all instantaneous download speeds on a proxy, reorganize if the sums are constant and they are flat
   e. Create a nice breakdown of nework growth as a function of all data storage, not only peers (spoofing peers is a problem for multi-proxy setups)
4. TCP and (possibly) UDP holepunching

General Improvement
1. Originally, the trans_i was used to preserve data between different versions of the software (i.e. backwards compatiability).
   However, exported space can be preserved if we define all of one type in an array and refer to them as elements, instead of independent
   variables. This would break old code, but there is nothing preserved at this stage in development.
2. Moving code over to templates and generics could help wonderfully
3. Tacky and hacky code is allowed, and is encouraged if it makes my life easier, SO LONG AS all of the tacky references can fit on my
   screen at any one time, in one file, back to back.
4. I would rather live with an extra 100 bytes in storage than have to deal with, maintain, and work upon tacky garbage I did in version one, since
   optimizations can come about.

   For example, if I have two connections to the internet, one high upload and low download, and one high download
   and low upload, they have different network peers associated with them. In the older model of network requests, all requests would be sent to
   the peer associated with the socket. However, since there are seperate high upload and high download connections, it would make the most sense
   to send the request (via a multicast, maybe) through the high upload network peer to the other peers on the network, and the receivers of the
   network request check the hashes of the two network peers. If they match, then allow it as normal. Although this use case is limited, such
   shortcuts and optimizations could lay a roadblock for future strikes of genius.
5. There are far too few tests being ran, and the tests that are being ran don't fit any basic style guidelines or have any serious documentation
   whatsoever. I want to fix this, since a majority of my problems come from false positives or outright broken tests.
